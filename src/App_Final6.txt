import React, { useState, useEffect, useRef } from 'react';
import { openDB } from 'idb';
import './styles.css';

const iconURLs = {
  Books: 'https://cdn-icons-png.flaticon.com/512/29/29302.png',              // Open Book
  Movies: '/film-strip.png', // local image in public folder,                // Film Strip
  Music: 'https://cdn-icons-png.flaticon.com/512/727/727218.png',            // Music Note
  Philosophy: 'https://cdn-icons-png.flaticon.com/512/1006/1006553.png',     // Light Bulb Idea
  Places: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',           // Location Pin
  'Daily Entry': 'https://cdn-icons-png.flaticon.com/512/747/747376.png',    // Notebook or Journal
  Other: 'https://cdn-icons-png.flaticon.com/512/1828/1828970.png',          // Ellipsis (3 dots)
};

const categoryFields = {
  Books: ["Title", "Author", "Link", "Comment"],
  Movies: ["Title", "Director", "Link", "Comment"],
  Music: ["Title", "Artist", "Link", "Comment"],
  Philosophy: ["Title", "Thinker", "Link", "Comment"],
  Places: ["Name", "Location", "Link", "Comment"],
  "Daily Entry": ["Mood", "Highlight", "Comment"],
  Other: ["Title", "Comment"],
};

const categoryPrompts = {
  Books: [
    "What's a favorite book title you've read recently?",
    "Share a memorable quote from a book.",
    "Which author inspires you the most?"
  ],
  Movies: [
    "Name a movie that left an impression on you.",
    "Who is your favorite director?",
    "Share a link to a movie trailer you like."
  ],
  Music: [
    "What's a song or album you can't stop playing?",
    "Who is your favorite artist?",
    "Link a music video you love."
  ],
  Philosophy: [
    "Which philosopher's ideas resonate with you?",
    "Share a thought-provoking quote.",
    "Who is a thinker that challenges your views?"
  ],
  Places: [
    "Describe a place you'd love to visit.",
    "What's a memorable location from your travels?",
    "Share a link about a special place."
  ],
  "Daily Entry": [
    "How are you feeling today?",
    "What was the highlight of your day?",
    "Any thoughts or reflections to share?"
  ],
  Other: [
    "Write anything you'd like to remember.",
    "What's on your mind?",
    "Share a comment or note."
  ],
};

const initDB = async () => {
  return openDB('legacy-echo-db', 2, {
    upgrade(db, oldVersion) {
      if (!db.objectStoreNames.contains('entries')) {
        db.createObjectStore('entries', { keyPath: 'id', autoIncrement: true });
      }
    },
  });
};

// Sanitize entry data to save only strings, numbers, booleans
const sanitizeEntryData = (data) => {
  const cleanData = {};
  for (const key in data) {
    const val = data[key];
    if (typeof val === 'string' && val.trim() !== '') {
      cleanData[key] = val.trim();
    } else if (typeof val === 'number' || typeof val === 'boolean') {
      cleanData[key] = val;
    }
  }
  return cleanData;
};

function App() {
  const [categories, setCategories] = useState([
    'Books', 'Movies', 'Music', 'Philosophy', 'Places', 'Daily Entry', 'Other',
  ]);
  const [entries, setEntries] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [entryData, setEntryData] = useState({});
  const [filterCategory, setFilterCategory] = useState('');
  const [filterKeyword, setFilterKeyword] = useState('');
  const [image, setImage] = useState(null);
  const [videoBlob, setVideoBlob] = useState(null);
  const [videoURL, setVideoURL] = useState(null);
  const [recording, setRecording] = useState(false);

  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const liveVideoRef = useRef(null);

  const [prompt, setPrompt] = useState('');
  const [editingId, setEditingId] = useState(null);

  // Load entries from IndexedDB on mount
  useEffect(() => {
    const loadEntries = async () => {
      const db = await initDB();
      const allEntries = await db.getAll('entries');

      const processedEntries = allEntries.map(entry => {
        if (entry.videoData) {
          const blob = new Blob([entry.videoData], { type: 'video/webm' });
          return { ...entry, video: URL.createObjectURL(blob) };
        }
        return entry;
      });

      setEntries(processedEntries);
    };
    loadEntries();
  }, []);

  // When recording starts, assign stream to live video and play it
  useEffect(() => {
    if (recording && liveVideoRef.current && streamRef.current) {
      liveVideoRef.current.srcObject = streamRef.current;
      liveVideoRef.current.play().catch(() => {});
    }
  }, [recording]);

  const handleCategoryChange = (category) => {
    if (category === '__new') {
      const newCat = window.prompt('Enter new category name:');
      if (newCat && !categories.includes(newCat)) {
        setCategories([...categories, newCat]);
        setSelectedCategory(newCat);
        setPrompt(getRandomPrompt(newCat));
      } else {
        setSelectedCategory('');
        setPrompt('');
      }
      setEntryData({});
      setImage(null);
      setVideoBlob(null);
      setVideoURL(null);
      setEditingId(null);
      return;
    }
    setSelectedCategory(category);
    setEntryData({});
    setImage(null);
    setVideoBlob(null);
    setVideoURL(null);
    setEditingId(null);
    setPrompt(getRandomPrompt(category));
  };

  const getRandomPrompt = (category) => {
    if (!categoryPrompts[category]) return '';
    const prompts = categoryPrompts[category];
    return prompts[Math.floor(Math.random() * prompts.length)];
  };

  const handleFieldChange = (field, value) => {
    setEntryData((prev) => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => setImage(reader.result);
    reader.readAsDataURL(file);
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true,
      });

      streamRef.current = stream;

      if (liveVideoRef.current) {
        liveVideoRef.current.srcObject = stream;
        liveVideoRef.current.play().catch(() => {});
      }

      const recorder = new MediaRecorder(stream);
      const chunks = [];

      recorder.ondataavailable = (e) => {
        if (e.data.size > 0) chunks.push(e.data);
      };

      recorder.onstop = () => {
        const blob = new Blob(chunks, { type: 'video/webm' });
        setVideoBlob(blob);
        setVideoURL(URL.createObjectURL(blob));

        if (streamRef.current) {
          streamRef.current.getTracks().forEach((track) => track.stop());
          streamRef.current = null;
        }
        if (liveVideoRef.current) {
          liveVideoRef.current.srcObject = null;
        }
      };

      recorder.start();
      mediaRecorderRef.current = recorder;
      setRecording(true);
      setVideoURL(null); // clear previous video preview
    } catch (err) {
      alert('Error accessing camera/microphone: ' + err.message);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
    }
    setRecording(false);
  };

  const saveEntry = async () => {
    if (!selectedCategory) {
      alert('Please select a category');
      return;
    }

    const cleanEntryData = sanitizeEntryData(entryData);

    const db = await initDB();
    const timestamp = new Date().toISOString();

    const newEntry = {
      category: selectedCategory,
      data: cleanEntryData,
      image,
      videoData: null,
      timestamp,
    };

    if (editingId != null) {
      newEntry.id = editingId;
    }

    if (videoBlob) {
      try {
        newEntry.videoData = await videoBlob.arrayBuffer();
      } catch (error) {
        alert("Error processing video data for saving: " + error.message);
        return;
      }
    }

    try {
      if (editingId != null) {
        await db.put('entries', newEntry);
        setEntries((prev) =>
          prev.map((e) =>
            e.id === editingId ? { ...newEntry, video: videoURL } : e
          )
        );
      } else {
        const id = await db.add('entries', newEntry);
        newEntry.id = id;
        newEntry.video = videoURL;
        setEntries([...entries, newEntry]);
      }
    } catch (error) {
      alert("Error saving entry: " + error.message);
      return;
    }

    // Reset form and media states
    setEntryData({});
    setImage(null);
    setVideoBlob(null);
    setVideoURL(null);
    setEditingId(null);

    // Do NOT clear live video element or its srcObject here to avoid black screen
  };

  const startEditEntry = (entry) => {
    setSelectedCategory(entry.category);
    setEntryData(entry.data);
    setImage(entry.image || null);
    if (entry.video) setVideoURL(entry.video);
    else setVideoURL(null);
    setVideoBlob(null);
    setEditingId(entry.id);
    setPrompt(getRandomPrompt(entry.category));
  };

  const deleteEntry = async (id) => {
    const db = await initDB();
    await db.delete('entries', id);
    setEntries(entries.filter((e) => e.id !== id));
  };

  // Helper to convert ArrayBuffer to base64 string
  const arrayBufferToBase64 = (buffer) => {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    bytes.forEach((b) => (binary += String.fromCharCode(b)));
    return window.btoa(binary);
  };

  // Helper to convert base64 string back to ArrayBuffer
  const base64ToArrayBuffer = (base64) => {
    const binaryString = window.atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
  };

  // Updated export: include base64 video data string
  const saveListToFile = () => {
    const exportEntries = entries.map((entry) => {
      let videoDataBase64 = null;
      if (entry.videoData) {
        videoDataBase64 = arrayBufferToBase64(entry.videoData);
      }
      return {
        ...entry,
        videoData: videoDataBase64,
        // Remove video URL so JSON size is smaller and clean
        video: undefined,
      };
    });

    const blob = new Blob([JSON.stringify(exportEntries)], {
      type: 'application/json',
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'legacy-echo-entries.json';
    link.click();
    URL.revokeObjectURL(url);
  };

  // Updated import: decode base64 to ArrayBuffer, create video URL
  const loadListFromFile = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = async (event) => {
      const loadedEntries = JSON.parse(event.target.result);
      const db = await initDB();
      const tx = db.transaction('entries', 'readwrite');
      const store = tx.objectStore('entries');

      for (const entry of loadedEntries) {
        if (entry.videoData) {
          entry.videoData = base64ToArrayBuffer(entry.videoData);
        }
        await store.put(entry);
      }
      await tx.done;

      const processedEntries = loadedEntries.map(entry => {
        if (entry.videoData) {
          const blob = new Blob([entry.videoData], { type: 'video/webm' });
          return { ...entry, video: URL.createObjectURL(blob) };
        }
        return entry;
      });

      setEntries(processedEntries);
    };
    reader.readAsText(file);
    e.target.value = '';
  };

  const filteredEntries = entries.filter((entry) => {
    return (
      (!filterCategory || entry.category === filterCategory) &&
      (!filterKeyword ||
        JSON.stringify(entry)
          .toLowerCase()
          .includes(filterKeyword.toLowerCase()))
    );
  });

  const renderCategoryOption = (cat) => (
    <option key={cat} value={cat}>
      {cat}
    </option>
  );

  return (
    <div className="container">
      <header className="banner-header">
        <img
          src="/banner2.png"
          alt="Legacy Echo Banner"
          className="banner-image"
        />
        <p className="subheader">
          Preserve your favorite books, movies, music, philosophy, places & more.
        </p>
      </header>

      <div className="category-select-row">
        <select
          className="category-select"
          value={selectedCategory}
          onChange={(e) => handleCategoryChange(e.target.value)}
        >
          <option value="">Select Category</option>
          {categories.map((cat) => renderCategoryOption(cat))}
          <option value="__new">➕ Add New Category</option>
        </select>
        {selectedCategory && iconURLs[selectedCategory] && (
          <img
            src={iconURLs[selectedCategory]}
            alt={selectedCategory}
            className="category-icon"
          />
        )}
      </div>

      {selectedCategory && prompt && (
        <div className="prompt-text">💡 {prompt}</div>
      )}

      {selectedCategory && selectedCategory !== '__new' && (
        <div className="entry-form">
          {categoryFields[selectedCategory]
            ? categoryFields[selectedCategory].map((field) => {
                if (field.toLowerCase() === 'comment') {
                  // Render textarea for comment field
                  return (
                    <div className="form-row" key={field}>
                      <label>{field}:</label>
                      <textarea
                        className="textarea-input"
                        value={entryData[field] || ''}
                        onChange={(e) => handleFieldChange(field, e.target.value)}
                      />
                    </div>
                  );
                } else {
                  // Render normal input for other fields
                  return (
                    <div className="form-row" key={field}>
                      <label>{field}:</label>
                      <input
                        type="text"
                        value={entryData[field] || ''}
                        onChange={(e) => handleFieldChange(field, e.target.value)}
                        className="entry-input"
                      />
                    </div>
                  );
                }
              })
            : ["Title", "Comment"].map((field) => {
                if (field.toLowerCase() === 'comment') {
                  return (
                    <div className="form-row" key={field}>
                      <label>{field}:</label>
                      <textarea
                        className="textarea-input"
                        value={entryData[field] || ''}
                        onChange={(e) => handleFieldChange(field, e.target.value)}
                      />
                    </div>
                  );
                } else {
                  return (
                    <div className="form-row" key={field}>
                      <label>{field}:</label>
                      <input
                        type="text"
                        value={entryData[field] || ''}
                        onChange={(e) => handleFieldChange(field, e.target.value)}
                        className="entry-input"
                      />
                    </div>
                  );
                }
              })}

          <div className="form-row">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              id="addImageInput"
              style={{ display: 'none' }}
            />
            <button
              className="add-image-btn"
              onClick={() => document.getElementById('addImageInput').click()}
            >
              Add Image
            </button>
            {image && (
              <img
                src={image}
                alt="Preview"
                className="entry-image-preview"
                onClick={() => window.open(image, '_blank')}
              />
            )}
          </div>

          <div className="video-record-controls">
            {!recording ? (
              <button className="record-btn" onClick={startRecording}>
                Record Video
              </button>
            ) : (
              <button className="stop-btn" onClick={stopRecording}>
                Stop Video
              </button>
            )}
          </div>

          {/* Live video preview is always rendered, show/hide by style */}
          <video
            ref={liveVideoRef}
            autoPlay
            muted
            playsInline
            className="live-video-preview"
            style={{ display: recording ? 'block' : 'none' }}
          />

          {videoURL && !recording && (
            <video
              className="entry-video-preview"
              src={videoURL}
              controls
              preload="metadata"
            />
          )}

          <button className="save-btn" onClick={saveEntry}>
            {editingId != null ? "Update Entry" : "Save Entry"}
          </button>
        </div>
      )}

      <div className="filters-section">
        <label htmlFor="filterKeywordInput" style={{ marginRight: '8px' }}>
          Search Keywords:
        </label>
        <input
          id="filterKeywordInput"
          className="filter-input filter-input-small"
          type="text"
          value={filterKeyword}
          onChange={(e) => setFilterKeyword(e.target.value)}
          placeholder="Search all fields"
        />

        <label htmlFor="filterCategorySelect" style={{ marginLeft: '1rem', marginRight: '8px' }}>
          Filter Category:
        </label>
        <select
          id="filterCategorySelect"
          className="filter-select"
          value={filterCategory}
          onChange={(e) => setFilterCategory(e.target.value)}
        >
          <option value="">All</option>
          {categories.map((cat) => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>
      </div>

      {categories.map((category) => {
        const catEntries = filteredEntries.filter((e) => e.category === category);
        if (catEntries.length === 0) return null;
        return (
          <div key={category} className="category-group">
            <h2 className="category-header">
              {iconURLs[category] && (
                <img
                  src={iconURLs[category]}
                  alt={category}
                  className="category-list-image"
                />
              )}
              {category}
            </h2>
            <div className="entries-container">
            {catEntries.map((entry) => (
              <div key={entry.id} className="entry-card">
                {Object.entries(entry.data).map(([field, value]) =>
                  field.toLowerCase() !== 'comment' ? (
                    <div key={field}>
                      <strong>{field}:</strong> {value}
                    </div>
                  ) : (
                    <div key={field}>
                      <strong>{field}:</strong>
                      <p style={{ whiteSpace: 'pre-wrap' }}>{value}</p>
                    </div>
                  )
                )}
                {(entry.image || entry.video) && (
  <div className="media-row">
    {entry.image && (
      <img
        src={entry.image}
        alt="Uploaded"
        className="entry-media"
      />
    )}
    {entry.video && (
      <video
        controls
        src={entry.video}
        className="entry-media"
      />
    )}
  </div>
)}
                <div className="timestamp">{new Date(entry.timestamp).toLocaleString()}</div>
                <div className="entry-actions">
                  <button className="edit-btn" onClick={() => startEditEntry(entry)}>
                    Edit
                  </button>
                  <button className="delete-btn" onClick={() => deleteEntry(entry.id)}>
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
          </div>
        );
      })}

      <div className="export-section">
        <button className="export-btn" onClick={saveListToFile}>
          Export Entries
        </button>
        <label htmlFor="importInput" className="import-label">
          Import Entries
        </label>
        <input
          type="file"
          id="importInput"
          accept="application/json"
          onChange={loadListFromFile}
          style={{ display: 'none' }}
        />
      </div>
    </div>
  );
}

export default App;
